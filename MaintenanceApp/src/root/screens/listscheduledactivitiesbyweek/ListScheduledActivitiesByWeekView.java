package root.screens.listscheduledactivitiesbyweek;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import root.Navigable;
import root.Screen;
import ui.ButtonColumn;
import ui.ButtonColumnActionListener;

public class ListScheduledActivitiesByWeekView extends Screen implements PropertyChangeListener {
    ListScheduledActivitiesByWeekModel model;
    private final ButtonColumn selectCol;
    /**
     * Creates new form ListScheduledActivitiesByWeekView
     * @param nav navigator used to switch between screens
     * @param model The view needs a reference to the model
     */
    public ListScheduledActivitiesByWeekView(Navigable nav,ListScheduledActivitiesByWeekModel model) {
        super(nav);
        initComponents();
        this.model = model;
        // The view listens for changes to the model
        this.model.addPropertyChangeListener(this);
        this.numWeekComboBox.setModel(this.model.getNumWeekComboBoxModel());
        this.scheduledActivitiesTable.setModel(this.model.getScheduledActivitiesTableModel());
        selectCol = new ButtonColumn(scheduledActivitiesTable.getColumn("select"), true, 75);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        numWeekComboBox = new javax.swing.JComboBox<>();
        tableScrollPane = new javax.swing.JScrollPane();
        scheduledActivitiesTable = new javax.swing.JTable();
        weekLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        scheduledActivitiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "AREA", "TYPE", "ESTIMATED INTERVENTION TIME [min]"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scheduledActivitiesTable.getTableHeader().setReorderingAllowed(false);
        tableScrollPane.setViewportView(scheduledActivitiesTable);

        weekLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        weekLabel.setText("Week nÂ°");
        weekLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 0)));

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        titleLabel.setText("Maintenance Activities");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addGap(178, 178, 178)
                        .addComponent(titleLabel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(weekLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(numWeekComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(tableScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 827, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel)
                    .addComponent(backButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(numWeekComboBox)
                    .addComponent(weekLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        //Not useful
    }//GEN-LAST:event_backButtonActionPerformed
    // The controller will register as a listener using these methods
    public void addBackButtonListener(ActionListener al) {
         backButton.addActionListener(al);
    }
    
    public void addNumWeeKBoxListener(ActionListener al) {
         numWeekComboBox.addActionListener(al);
    }
    
    public void setSelectButtonListener(ButtonColumnActionListener al) {
        selectCol.setActionListener(al);
    }
    
    /**
     * Remove the current screen and show the previous one.
     */
    public void toThePreviousScreen(){
        super.getNav().pop();
    }
    
    /**
     * Returns the number of row in the table of the activity selected
     * @return number of row (index)
     */
    public int getSelectedScheduledActivityIndex(){
        return scheduledActivitiesTable.getSelectedRow();
    }
     
     /**
     * Returns the number of week selected in the combobox
     * @return number of week
     */
    public Integer getSelectedComboBoxInteger(){
        return (Integer) numWeekComboBox.getSelectedItem();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<Integer> numWeekComboBox;
    private javax.swing.JTable scheduledActivitiesTable;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel weekLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Create a new table model that is going to be setted as the model of the table of the view in case of a property change
     * @param pce PropertyChangeEvent
     */
    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        if (pce.getPropertyName().equals(ListScheduledActivitiesByWeekModel.NUMWEEK_CHANGE)) {
            Integer newNumWeek = (Integer) pce.getNewValue();
            try {
                this.scheduledActivitiesTable.setModel(this.model.createTableModel());
                selectCol.addTo(scheduledActivitiesTable.getColumn("select"));
            } catch (SQLException ex) {
                Logger.getLogger(ListScheduledActivitiesByWeekView.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }     
    }
}
